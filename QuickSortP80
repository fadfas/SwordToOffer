#include<iostream>	
#include<string>
#include<ctime>
#include<cstdlib>
using std::cout;
using std::endl;

int RandomPivort(int start, int end) {
	int random = rand() % (end - start + 1) + start;
	return random;
}

void swap(int data[], int a, int b) {
	int temp = data[a];
	data[a] = data[b];
	data[b] = temp;
}
int Partition(int data[], int length, int start, int end) {
	if (data == nullptr || length <= 0 || start < 0 || end >= length) {
		throw new std::exception("Invalid Parameters");
	}

	int pivot = RandomPivot(start, end);
	swap(data, pivot, end);

	int small = start - 1;
	for (int index = start; index < end; ++index) {
		if (data[index] < data[end]) {
			++small;
			if (small != index) {
				swap(data, small, index);
			}
		}
	}

	++small;
	swap(data, small, end);
	
	return small;
	}

void QuickSort(int data[], int length, int start, int end) {
	if (start == end) {
		return;
	}

	int small = Partition(data, length, start, end);
	if (small > start) {
		QuickSort(data, length, start, small - 1);
	}
	if (small < end) {
		QuickSort(data, length, small + 1, end);
	}
}

int main() {
	int test[] = { 0,1,2,3,4,5,6,7 };
	QuickSort(test,8,0,7);
	for (auto i : test) {
		cout << i << endl;
	}

}


int mypartition(vector<int>&arr, int low, int high)
{
    int pivot = arr[high];//选最后一个元素作为枢纽元
    int location = low-1;//location指向比pivot小的元素段的尾部
    for(int i = low; i < high; i++)//比枢纽元小的元素依次放在前半部分
       if(arr[i] < pivot)
           swap(arr[i], arr[++location]);
    swap(arr[high], arr[++location]);
    return location;
}

void quicksort(vector<int>&arr, int low, int high)
{
    if(low < high)
    {
        int middle = mypartition(arr, low, high);
        quicksort(arr, low, middle-1);
        quicksort(arr, middle+1, high);
    }
}


void quicksort_unrecursion(vector<int>&arr)//快速排序非递归
 {
     int mystack[2000];//假设递归不超过1000层
     //栈中保存下次需要排序的子数组的开始位置和结束位置
     int top = -1;
     mystack[++top] = 0;
     mystack[++top] = arr.size() - 1;
     while(top > 0)//栈非空
     {
         int high = mystack[top--], low = mystack[top--];
         int middle = mypartition(arr, low, high);
         if(middle+1 < high)//右边子数组入栈
         {
             mystack[++top] = middle+1;
             mystack[++top] = high;
         }
         if(low < middle-1)//左边子数组入栈
         {
             mystack[++top] = low;
             mystack[++top] = middle-1;
         }
     }
 }

#include<cstring>
#include<iostream>
#include<cstring>
#include<array>
#include<string>
#include<cstdio>
#include<stack>
#include<vector>
#include<deque>
#include<set>
#include<ctime>
#include<algorithm>
#include<functional>
//using std::cout;
//using std::endl;
//using std::array;
//using std::string;
//using std::vector;
//using std::deque;
//using std::less;
//using std::greater;

using namespace std;

struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
		val(x), left(NULL), right(NULL) {
	}
};

int IsBanlanced_SolutionRecursively(TreeNode* pRoot) {
	if (pRoot == nullptr) {
		return 0;
	}

	int leftDepth = IsBanlanced_SolutionRecursively(pRoot->left);
	if (leftDepth == -1) {
		return -1;
	}

	int rightDepth = IsBanlanced_SolutionRecursively(pRoot->right);
	if (rightDepth == -1) {
		return -1;
	}

	return abs(leftDepth - rightDepth) > 1 ? -1 : max(leftDepth, rightDepth) + 1;
}

bool IsBalanced_Solution(TreeNode* pRoot) {
	if (pRoot == nullptr) {
		return true;
	}

	return IsBanlanced_SolutionRecursively(pRoot) != -1;
}
int main(int argc, char* argv[])
{

}

#include<cstring>
#include<iostream>
#include<cstring>
#include<array>
#include<string>
#include<cstdio>
#include<stack>
#include<vector>
#include<deque>
using std::cout;
using std::endl;
using std::array;
using std::string;
using std::vector;
using std::deque;


struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
		val(x), left(NULL), right(NULL) {
	}
};

TreeNode* CreateTreeNode(int value)
{
	TreeNode* pNode = new TreeNode(value);
	pNode->left = nullptr;
	pNode->right = nullptr;

	return pNode;
}

void ConnectTreeNodes(TreeNode* pParent, TreeNode* pLeft, TreeNode* pRight)
{
	if (pParent != nullptr)
	{
		pParent->left = pLeft;
		pParent->right = pRight;
	}
}

void PrintTreeNode(const TreeNode* pNode)
{
	if (pNode != nullptr)
	{
		printf("value of this node is: %d\n", pNode->val);

		if (pNode->left != nullptr)
			printf("value of its left child is: %d.\n", pNode->left->val);
		else
			printf("left child is nullptr.\n");

		if (pNode->right != nullptr)
			printf("value of its right child is: %d.\n", pNode->right->val);
		else
			printf("right child is nullptr.\n");
	}
	else
	{
		printf("this node is nullptr.\n");
	}

	printf("\n");
}

void PrintTree(const TreeNode* pRoot)
{
	PrintTreeNode(pRoot);

	if (pRoot != nullptr)
	{
		if (pRoot->left != nullptr)
			PrintTree(pRoot->left);

		if (pRoot->right != nullptr)
			PrintTree(pRoot->right);
	}
}




	vector<string> PrintFromTopToBottom(TreeNode* root) {
		vector<string> printSeq;
		deque<TreeNode*> treeDeque;
		if (root == nullptr) {
			return printSeq;
		}

		treeDeque.push_back(root);
		int thisLevelToBePrinted = 1;
		int nextLevelToBePrinted = 0;
		while (treeDeque.size()) {
			TreeNode* temp = treeDeque.front();
			treeDeque.pop_front();

			printSeq.push_back(std::to_string(temp->val));
			--thisLevelToBePrinted;
			if (temp->left) {
				treeDeque.push_back(temp->left);
				++nextLevelToBePrinted;
			}
			if (temp->right) {
				treeDeque.push_back(temp->right);
				++nextLevelToBePrinted;
			}

			if (thisLevelToBePrinted == 0) {
				printSeq.push_back("\n");
				thisLevelToBePrinted = nextLevelToBePrinted;
				nextLevelToBePrinted = 0;
			}

		}
		return printSeq;
	}
	



int main(int argc, char* argv[])
{
	TreeNode* pNode11 = CreateTreeNode(11);
	TreeNode* pNode21 = CreateTreeNode(21);
	TreeNode* pNode22 = CreateTreeNode(22);
	TreeNode* pNode31 = CreateTreeNode(31);
	TreeNode* pNode34 = CreateTreeNode(34);

	ConnectTreeNodes(pNode11, pNode21,pNode22);
	ConnectTreeNodes(pNode21, pNode31, nullptr);
	ConnectTreeNodes(pNode22, nullptr, pNode34);

	PrintTree(pNode11);

	vector<string> outcome = PrintFromTopToBottom(pNode11);

	auto begin = outcome.begin();
	auto end = outcome.end();

	while (begin != end) {
		cout << *begin;
		++begin;
	}

	cout << "===================" << endl;

	string s = "\n";
	cout << s;
	cout << "11111111" << endl;
}

#include<cstring>
#include<iostream>
#include<cstring>
#include<array>
#include<string>
#include<cstdio>
#include<stack>
#include<vector>
#include<deque>
#include<set>
#include<ctime>
#include<algorithm>
#include<functional>
//using std::cout;
//using std::endl;
//using std::array;
//using std::string;
//using std::vector;
//using std::deque;
//using std::less;
//using std::greater;

using namespace std;

vector<int> getVec(int small, int big) {
	vector<int> temp = {};

	for (int i = small; i <= big; ++i) {
		temp.push_back(i);
	}

	return temp;
}
template<typename T> class QueueWithMax {
public:
	QueueWithMax() :currentIndex(0) {

	}

	void push_back(T num) {
		if (!maximums.empty() && num > maximums.back().number) {
			maximums.pop_back();
		}
		InternalData internalData = { num,currentIndex };
		data.push_back(internalData);
		maximums.push_back(internalData);

		++currentIndex;
	}

	void pop_front() {
		if (maximums.empty()) {
			throw new std::exception("Queue is empyt.");
		}

		if (data.front().index == maximums.front().index) {
			maximums.pop_front();
		}

		data.pop_front();
	}

	T max() {
		if (maximums.empty()) {
			throw new std::exception("Queue is empty.");
		}

		return maximums.front().number;
	}

private:
	struct InternalData
	{
		T number;
		int index;
	};

	deque<InternalData> data;
	deque<InternalData> maximums;
	int currentIndex;
};

// ====================测试代码====================
void Test(const char* testName, QueueWithMax<int>& queue, int expected)
{
	if (testName != nullptr)
		printf("%s begins: ", testName);

	if (queue.max() == expected)
		printf("Passed.\n");
	else
		printf("FAILED.\n");
}

int main(int argc, char* argv[])
{
	QueueWithMax<int> queue;
	// {2}
	queue.push_back(2);
	Test("Test1", queue, 2);

	// {2, 3}
	queue.push_back(3);
	Test("Test2", queue, 3);

	// {2, 3, 4}
	queue.push_back(4);
	Test("Test3", queue, 4);

	// {2, 3, 4, 2}
	queue.push_back(2);
	Test("Test4", queue, 4);

	// {3, 4, 2}
	queue.pop_front();
	Test("Test5", queue, 4);

	// {4, 2}
	queue.pop_front();
	Test("Test6", queue, 4);

	// {2}
	queue.pop_front();
	Test("Test7", queue, 2);

	// {2, 6}
	queue.push_back(6);
	Test("Test8", queue, 6);

	// {2, 6, 2}
	queue.push_back(2);
	Test("Test9", queue, 6);

	// {2, 6, 2, 5}
	queue.push_back(5);
	Test("Test9", queue, 6);

	// {6, 2, 5}
	queue.pop_front();
	Test("Test10", queue, 6);

	// {2, 5}
	queue.pop_front();
	Test("Test11", queue, 5);

	// {5}
	queue.pop_front();
	Test("Test12", queue, 5);

	// {5, 1}
	queue.push_back(1);
	Test("Test13", queue, 5);

	return 0;
}

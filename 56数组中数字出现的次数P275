#include<cstring>
#include<iostream>
#include<cstring>
#include<array>
#include<string>
#include<cstdio>
#include<stack>
#include<vector>
#include<deque>
#include<set>
#include<ctime>
#include<algorithm>
#include<functional>
//using std::cout;
//using std::endl;
//using std::array;
//using std::string;
//using std::vector;
//using std::deque;
//using std::less;
//using std::greater;

using namespace std;

bool isBit1(int num, int index) {
	num=num >> index;
	return (num & 1);
}

int FirstBitIs1(int num) {
	int bit1Index = 0;
	while (((num & 1) == 0) && bit1Index < 8 * sizeof(int)) { //&运算一定要用括号括起来，注意优先级顺序
		num=num >> 1;
		++bit1Index;
	}

	return bit1Index;
}

void FindNumsAppearOnce(vector<int> data, int* num1, int *num2) {
	if (data.size() < 0) {
		*num1 = -1;
		*num2 = -1;
	}

	int temp = 0;
	for (int i = 0; i < data.size(); ++i) {
		temp ^= data[i];
	}

	int bit1Index = FirstBitIs1(temp);

	*num1 = *num2 = 0;

	for (int i = 0; i < data.size(); ++i) {
		if (isBit1(data[i], bit1Index)) {
			*num1 ^= data[i];
		}
		else
		{
			*num2 ^= data[i];
		}
	}
	
}

int main(int argc, char* argv[])
{
	vector<int> test = { 2,2,1,3 };
	int* a = new int;
	int* b = new int;

	FindNumsAppearOnce(test, a, b);
	cout << *a << endl;
	cout << *b << endl;

}

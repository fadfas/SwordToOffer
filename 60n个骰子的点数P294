#include<cstring>
#include<iostream>
#include<cstring>
#include<array>
#include<string>
#include<cstdio>
#include<stack>
#include<vector>
#include<deque>
#include<set>
#include<ctime>
#include<algorithm>
#include<functional>
//using std::cout;
//using std::endl;
//using std::array;
//using std::string;
//using std::vector;
//using std::deque;
//using std::less;
//using std::greater;

using namespace std;

int g_maxValue = 6;

void Probability(int original, int current, int sum, int* pProbabilities) {
	if (current == 1) {
		pProbabilities[sum - original]++;
	}
	else
	{
		for (int i = 1; i <= g_maxValue; ++i) {
			Probability(original, current - 1, i + sum, pProbabilities);
		}
	}
}

void PrintProbability_Solution1(int n) {
	if (n < 1) {
		return;
	}

	int* pProbabilities = new int[n*g_maxValue - n + 1];

	for (int i = 0; i < (n*g_maxValue - n + 1); ++i) {
		pProbabilities[i] = 0;
	}

	for (int i = 1; i <= g_maxValue; ++i) {
		Probability(n, n, i, pProbabilities);
	}
	
	int total = pow(g_maxValue, n);

	for (int i = 0; i < (n*g_maxValue - n + 1); ++i) {
		double probability = (double)pProbabilities[i] / (double)total;
		printf("%d:%e\n", i + n, probability);
	}

	delete[] pProbabilities;
}

void PrintProbability_Solution2(int n) {
	if (n < 1) {
		return;
	}

	int* pProbabilities[2];
	pProbabilities[0] = new int[n*g_maxValue + 1];
	pProbabilities[1] = new int[n*g_maxValue + 1];

	for (int i = 0; i < n*g_maxValue + 1; ++i) {
		pProbabilities[0][i] = 0;
		pProbabilities[1][i] = 0;
	}

	int flag = 0;

	for (int i = 1; i <= g_maxValue; ++i) {
		pProbabilities[flag][i] = 1;
	}

	for (int k = 2; k <= n; ++k) {
		for (int i = 0; i < k; ++i) {
			pProbabilities[1 - flag][i] = 0;
		}

		for (int i = k; i <= k*g_maxValue; ++i) {
			pProbabilities[1 - flag][i] = 0;
			for (int j = 1; i - j >= 0 && j <= g_maxValue; ++j) {
				pProbabilities[1 - flag][i] += pProbabilities[flag][i - j];
			}
		}
		flag = 1 - flag;
	}

	int total = pow(g_maxValue, n);
	
	for (int i = n; i <= n * g_maxValue; ++i) {
		double ratio = (double)(pProbabilities[flag][i]) / total;
		printf("%d:%e\n", i, ratio);
	}

	delete[] pProbabilities[0];
	delete[] pProbabilities[1];
	
}

// ====================测试代码====================
void Test(int n)
{
	printf("Test for %d begins:\n", n);

	printf("Test for solution1\n");
	PrintProbability_Solution1(n);

	printf("Test for solution2\n");
	PrintProbability_Solution2(n);

	printf("\n");
}

int main(int argc, char* argv[])
{
	Test(1);
	Test(2);
	Test(3);
	Test(4);

	Test(11);

	Test(0);

	return 0;
}

#include<cstring>
#include<iostream>
#include<cstring>
#include<array>
#include<string>
#include<cstdio>
#include<stack>
#include<vector>
#include<deque>
#include<set>
#include<ctime>
#include<algorithm>
#include<functional>
//using std::cout;
//using std::endl;
//using std::array;
//using std::string;
//using std::vector;
//using std::deque;
//using std::less;
//using std::greater;

using namespace std;

int g_maxValue = 6;

void Probability(int original, int current, int sum, int* probabilities) {
	if (current == 0) {  //注意和书的区别，我的这种写法，递归的种植条件是curren==0
		probabilities[sum - original]++;  //不能写成probabilities[sum]++
	}
	else
	{
		for (int i = 1; i <= g_maxValue; ++i) {
			Probability(original, current - 1, i + sum, probabilities);
		}
	}
}

void PrintProbability_Solution1(int number) {
	if (number < 1) {
		return;
	}

	int* probabilities = new int[number*g_maxValue - number + 1];
	for (int i = 0; i < number*g_maxValue - number + 1; ++i) {  //数组要初始化！！！！
		probabilities[i] = 0;
	}
	Probability(number, number, 0, probabilities);

	int total = pow(g_maxValue, number);
	for (int i = number; i <= number * g_maxValue; ++i) {    //不是i<=number*g_maxValue
		double ratio = (double)probabilities[i - number] / total;  //必须进行类型转换！！！
		printf("%d: %e\n", i, ratio);
	}

	delete[] probabilities;
}

void PrintProbability_Solution2(int number)
{
	if (number < 1)
		return;

	//另一种二维数组声明方法：  int** pProbabilities=new int*[2]; pProbabilities[0]=new int[g_maxValue*number+1]

	int* pProbabilities[2];  //二维数组声明方法，不可以; int* pProbabilities=new int*[2]  
	pProbabilities[0] = new int[g_maxValue*number + 1];
	pProbabilities[1] = new int[g_maxValue*number + 1];

	for (int i = 0; i < g_maxValue*number + 1; ++i) {
		pProbabilities[0][i] = 0;
		pProbabilities[1][i] = 0;
	}

	int flag = 0;

	for (int i = 1; i <= g_maxValue; ++i) {
		pProbabilities[flag][i] = 1;  //对于这种比较复杂的情况，其初始情况可以单独处理一下，剩余的部分再用一个通用循环去处理
	}

	for (int k = 2; k <= number; ++k) {
		for (int i = 0; i < k; ++i) {
			pProbabilities[1 - flag][i] = 0;
		}

		for (int i = k; i <= g_maxValue * k; ++i) {
			pProbabilities[1 - flag][i] = 0;
			for (int j = 1; j <= g_maxValue && i - j > 0; ++j) {
				pProbabilities[1 - flag][i] += pProbabilities[flag][i - j];
			}
		}
		flag = 1 - flag;
	}

	double total = pow(g_maxValue, number);
	for (int i = number; i < number*g_maxValue + 1; ++i) {
		double ratio = (double)pProbabilities[flag][i] / total;   //不是pProbabilities[1-flag][i]，原因见书标注
		printf("%d: %e\n", i, ratio);
	}

	delete[] pProbabilities[0];
	delete[] pProbabilities[1];
}

// ====================测试代码====================
void Test(int n)
{
	printf("Test for %d begins:\n", n);

	printf("Test for solution1\n");
	PrintProbability_Solution1(n);

	printf("Test for solution2\n");
	PrintProbability_Solution2(n);

	printf("\n");
}

int main(int argc, char* argv[])
{
	Test(1);
	Test(2);
	Test(3);
	Test(4);

	Test(11);

	Test(0);

	return 0;
}

#include<stack>
#include<vector>
#include<deque>
#include<set>
#include<ctime>
#include<functional>
#include<set>
#include<limits>
using std::cout;
using std::endl;
using std::array;
using std::string;
using std::vector;
using std::deque;
using std::greater;

struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
		val(x), next(NULL) {
	}
};

ListNode* FindFirstCommonNode(ListNode* pHead1, ListNode* pHead2) {
	if (pHead1 == nullptr || pHead2 == nullptr) {
		return nullptr;
	}

	int length1 = 0;
	int length2 = 0;

	ListNode* pNode1 = pHead1;
	while (pNode1 != nullptr) {
		pNode1 = pNode1->next;
		++length1;
	}
	ListNode* pNode2 = pHead2;
	while (pNode2 != nullptr) {
		pNode2 = pNode2->next;
		++length2;
	}

	int lengthDifference = abs(length1 - length2);

	ListNode* pNode1 = pHead1;  //统计完长度后，别忘记重置为表头节点
	ListNode* pNode2 = pHead2;
	if (length1 > length2) {
		for (int i = 0; i < lengthDifference; ++i) {
			pNode1 = pNode1->next;
		}
	}
	else
	{
		for (int i = 0; i < lengthDifference; ++i) {
			pNode2 = pNode2->next;
		}
	}
	
	while ( (pNode1 != nullptr)&&(pNode2 != nullptr)&&(pNode1 != pNode2) ) {
		pNode1 = pNode1->next;
		pNode2 = pNode2->next;
	}

	ListNode* pNodeFirstCommon = pNode1;

	return pNodeFirstCommon;
}

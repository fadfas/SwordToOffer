#include<cstring>
#include<iostream>
#include<cstring>
#include<array>
#include<string>
#include<cstdio>
#include<stack>
#include<vector>
#include<deque>
#include<set>
#include<ctime>
#include<algorithm>
#include<functional>
//using std::cout;
//using std::endl;
//using std::array;
//using std::string;
//using std::vector;
//using std::deque;
//using std::less;
//using std::greater;

using namespace std;

int GetFirstK(int* data, int length, int start, int end, int k) {
	if (start > end) {
		return -1;
	}

	int middle = (end + start) / 2;
	int middleNumber = data[middle];

	if (middleNumber == k) {
		if ((middle != 0 && data[middle - 1] != k) || middle == 0) {
			return middle;
		}
		else
		{
			end = middle - 1;
		}
	}
	else if (middleNumber > k)
	{
		end = middle - 1;
	}
	else
	{
		start = middle + 1;
	}

	return GetFirstK(data, length, start, end, k);

}

int GetLastK(int*data, int length, int start, int end, int k) {
	if (start > end) {
		return -1;
	}

	int middle = (end + start) / 2;
	int middleNumber = data[middle];

	if (middleNumber == k) {
		if ((middle != end && data[middle + 1] != k) || middle == end) {
			return middle;
		}
		else
		{
			start = middle + 1;
		}
	}
	else if (middleNumber > k)
	{
		end = middle - 1;
	}
	else
	{
		start = middle + 1;
	}

	return GetLastK(data, length, start, end, k);
}

int GetNumberOfK(vector<int> data, int k) {

	int size = data.size();
	if (size == 0) {
		return 0;
	}

	int* dataArray = new int[size];

	for (int i = 0; i < size; ++i) {
		dataArray[i] = data[i];
	}

	int start = GetFirstK(dataArray, size, 0, size - 1, k);
	int end = GetLastK(dataArray, size, 0, size - 1, k);
	if (start != -1 && end != -1) {
		return end - start + 1;
	}

	return 0;
}

int main(int argc, char* argv[])
{
	vector<int> test = { 1,2,3,3,3,3,4,5 };
	cout << GetNumberOfK(test, 3) << endl;


}


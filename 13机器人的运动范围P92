class Solution {
public:
int check(int a, int b) {
	int sum = 0;
	while (a != 0) {
		sum += a % 10;
		a = a / 10;
	}

	while (b != 0) {
		sum += b % 10;
		b = b / 10;
	}

	return sum;
}

int movingCountCore(int threshold, int rows, int cols, int row, int col, bool* visted) {
	int index = row * cols + col;
	if (col < 0 || col >= cols || row < 0 || row >= rows || visted[index] == true || check(row, col)>threshold) {
		return 0;
	}

	visted[index] = true;

	return movingCountCore(threshold, rows, cols, row + 1, col, visted) +
		movingCountCore(threshold, rows, cols, row, col + 1, visted) +
		movingCountCore(threshold, rows, cols, row - 1, col, visted) +
		movingCountCore(threshold, rows, cols, row, col - 1, visted) + 1;
}

int movingCount(int threshold, int rows, int cols)
{
	if (threshold <= 0 || rows <= 0 || cols <= 0) {
		return 0;
	}
	bool* visted = new bool[rows*cols];
	memset(visted, 0, rows*cols);

	return movingCountCore(threshold, rows, cols, 0, 0, visted);
}
};

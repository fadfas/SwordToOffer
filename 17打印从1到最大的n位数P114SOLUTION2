#include<cstring>
#include<iostream>
#include<cstring>
using std::cout;
using std::endl;



bool Increment(char *number) {

	bool isOverFlow = false;
	int nTakeOver = 0;
	int nLength = strlen(number);

	for (int i = nLength - 1; i >= 0; --i) {
		int nSum = number[i] - '0' + nTakeOver;
		if (i == nLength - 1) {
			++nSum;
		}

		if (nSum >= 10) {
			if (i == 0) {
				isOverFlow = true;
			}
			else
			{
				nSum -= 10;
				nTakeOver = 1;
				number[i] = '0' + nSum;
			}

		}
		else
		{
			number[i] = '0' + nSum;
			break;
		}
	}
	return isOverFlow;
}

void printNumber(char* number) {
	int nLength = strlen(number);
	bool startPrint = false;

	for (int i = 0; i <= nLength - 1; ++i) {
		if (number[i] != '0') {
			startPrint = true;
		}
		if (startPrint) {
			cout << number[i];
			if (i == nLength - 1) {
				cout << endl;
			}
		}
	}
}

void Recursively(char *number, int length, int index) {
	if (index == length) {
		printNumber(number);
		return;
	}
	for (int i = 0; i < 10; ++i) {
		number[index] = '0' + i;
		Recursively(number, length, index + 1);
	}
}

void print1ToMaxOfNDigits(int n) {
	if (n <= 0) {
		return;
	}

	char *number = new char[n + 1];
	number[n] = '\0';

	for (int i = 0; i < 10; ++i) {
		number[0] = '0' + i;
		Recursively(number, n, 1);
	}

	delete[]number;
}

int main() {
	print1ToMaxOfNDigits(3);
}
